What happens when you initialize a repository? Why do you need to do it?
Initializing a repository creates one so that git can begin tracking any changes made to your files. These changes are monitored by comparing the individual commits that you make.

How is the staging area different from the working directory and the repository?
The staging area is an intimediate zone where you decide what to update from your directory to git
What value do you think it offers?
The value it adds is the ability to not make changes or to make changes.

How can you use the staging area to make sure you have one commit per logical change?
you can load the staging area with the logical changes that you want to commit by using the git add command. This will ensure only the files added to the staging area will be commited. 

What are some situations when branches would be helpful in keeping your history organized? 
Branches can help you keep changes orginised by allowing signifcant experimental changes to run down another path, this way there is always a stable build that can be used for presentation purposes.
How would branches help?
branches would help by allowing one to experiment but to still easily have access to the working version by use of an easy reference name not a long ambigous line of letters and numbers.

How do the diagrams help you visualize the branch structure?
The diagrams give a visual representation of the information flow between the git commits, it also helps make the definition of branches match relaity, it also gives light to the detached head comment when you git checkout a commit that isn't the master.  

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result of a merge is a child that stores information from both parents, both branches converge into one and are sorted by the date and time that they were commited. We represent it in the diagrams that way so that it makes sense in regards to the way the information flows.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
When there are no conflicting lines of code everything works perfectly. Only occasionally will two people work on the same part of a program so why sacrifice the effiecency when it's only required occasionally to do it the manual way
